( addr1, addr2 -- addr3 )
: concat
    dup              ( addr1, addr2, addr2 )
    count            ( addr1, addr2, len2 )
    rot              ( addr2, len2, addr1 )
    dup              ( addr2, len2, addr1, addr1 )
    count            ( addr2, len2, addr1, len1 )
    rot              ( addr2, addr1, len1, len2 )
    swap             ( addr2, addr1, len2, len1 )
    dup              ( addr2, addr1, len2, len1, len1 )
    ( one more len1 for offset to addr3 )
    rot              ( addr2, addr1, len1, len1, len2 )
    + heap-alloc     ( addr2, addr1, len1, addr3 )
    rot              ( addr2, len1, addr3, addr1 )
    dup              ( addr2, len1, addr3, addr1, addr1 )
    ( dup addr1 to free addr1 after concatintion )
    rot              ( addr2, len1, addr1, addr1, addr3 )
    dup              ( addr2, len1, addr1, addr1, addr3, addr3 )
    ( dup addr3 to save new word addr3 )
    rot              ( addr2, len1, addr1, addr3, addr3, addr1 )
    string-copy      ( addr2, len1, addr1, addr3 )
    ( first word already inside addr3 )
    swap             ( addr2, len1, addr3, addr1 )
    heap-free        ( addr2, len1, addr3 )
    ( free addr1 )
    dup              ( addr2, len1, addr3, addr3 )
    ( to save addr3 start )
    rot              ( addr2, addr3, addr3, len1 )
    +                ( addr2, addr3, addr3offset )
    ( offfset to ending of first word )
    rot              ( addr3, addr3offset, addr2 )
    dup              ( addr3, addr3offset, addr2, addr2 )
    ( dup addr2 to free addr2 after concatintion )
    rot              ( addr3, addr2, addr2, addr3offset )
    swap             ( addr3, addr2, addr3offset, addr2 )
    string-copy      ( addr3, addr2 )
    heap-free        ( addr3 )
    ( free addr2 )
;
